{"ast":null,"code":"import _classCallCheck from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/riki/Documents/Git/AudioSynth/front/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Oscillator from './synth';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      context: new AudioContext() //gainNode: this.state.context.createGain(),\n\n    }; //this.gainNode = this.state.context.createGain();\n\n    _this.buttonHandler = _this.buttonHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.connectOutput = _this.connectOutput.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"oscHandler\",\n    value: function oscHandler() {}\n  }, {\n    key: \"lfoHandler\",\n    value: function lfoHandler() {}\n  }, {\n    key: \"envelopeHandler\",\n    value: function envelopeHandler() {}\n  }, {\n    key: \"filterHandler\",\n    value: function filterHandler() {}\n  }, {\n    key: \"connectOutput\",\n    value: function connectOutput(node) {\n      node.connect(this.state.context.destination);\n    }\n  }, {\n    key: \"buttonHandler\",\n    value: function buttonHandler() {\n      // this.osc = this.state.context.createOscillator();\n      // this.gainNode = this.state.context.createGain();\n      // this.osc.connect(this.gainNode);\n      // //this.osc.connect(this.state.context.destination);\n      // this.gainNode.connect(this.state.context.destination);\n      // this.osc.type = 'square';\n      // this.osc.frequency.value = 440;\n      // let time = this.state.context.currentTime;\n      // this.gainNode.gain.setValueAtTime(1, time);\n      // this.osc.start(time);\n      // this.gainNode.gain.exponentialRampToValueAtTime(0.001, time + 1);\n      // this.osc.stop(time + 1);\n      // this.osc.disconnect();\n      this.refs.osc1.play(440, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"hello, world!\"), React.createElement(Oscillator, {\n        id: \"osc1\",\n        ref: \"osc1\",\n        nextNode: this.gainNode,\n        connectOutput: this.connectOutput,\n        context: this.state.context,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.buttonHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Play Sound!\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/riki/Documents/Git/AudioSynth/front/src/App.js"],"names":["React","Component","Oscillator","App","props","state","context","AudioContext","buttonHandler","bind","connectOutput","node","connect","destination","refs","osc1","play","gainNode"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,SAAvB;;IAGMC,G;;;;;AACJ,eAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IAAIC,YAAJ,EADE,CAEX;;AAFW,KAAb,CAFgB,CAMhB;;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,uDAArB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,uDAArB;AARgB;AASjB;;;;iCAEW,CAEX;;;iCAEW,CAEX;;;sCAEgB,CAEhB;;;oCAEc,CAEd;;;kCAEaE,I,EAAK;AACjBA,MAAAA,IAAI,CAACC,OAAL,CAAa,KAAKP,KAAL,CAAWC,OAAX,CAAmBO,WAAhC;AACD;;;oCACc;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAKC,IAAL,CAAUC,IAAV,CAAeC,IAAf,CAAoB,GAApB,EAAwB,CAAxB;AACD;;;6BAEQ;AACP,aAEE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,oBAAC,UAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,GAAG,EAAC,MAFN;AAGE,QAAA,QAAQ,EAAE,KAAKC,QAHjB;AAIE,QAAA,aAAa,EAAE,KAAKP,aAJtB;AAKE,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWC,OALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAUE;AAAQ,QAAA,OAAO,EAAE,KAAKE,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAVF,CAFF;AAeD;;;;EAhEeP,S;;AAmElB,eAAeE,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Oscillator from './synth';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      context: new AudioContext(),\n      //gainNode: this.state.context.createGain(),\n    };\n    //this.gainNode = this.state.context.createGain();\n    this.buttonHandler = this.buttonHandler.bind(this);\n    this.connectOutput = this.connectOutput.bind(this);\n  }\n\n  oscHandler(){\n\n  }\n\n  lfoHandler(){\n\n  }\n\n  envelopeHandler(){\n\n  }\n\n  filterHandler(){\n    \n  }\n\n  connectOutput(node){\n    node.connect(this.state.context.destination);\n  }\n  buttonHandler(){\n    // this.osc = this.state.context.createOscillator();\n    // this.gainNode = this.state.context.createGain();\n    // this.osc.connect(this.gainNode);\n    // //this.osc.connect(this.state.context.destination);\n    // this.gainNode.connect(this.state.context.destination);\n    // this.osc.type = 'square';\n    // this.osc.frequency.value = 440;\n    // let time = this.state.context.currentTime;\n    // this.gainNode.gain.setValueAtTime(1, time);\n    // this.osc.start(time);\n    // this.gainNode.gain.exponentialRampToValueAtTime(0.001, time + 1);\n    // this.osc.stop(time + 1);\n    // this.osc.disconnect();\n    this.refs.osc1.play(440,0);\n  }\n\n  render() {\n    return (\n    \n      <div className=\"App\">\n        <h1>hello, world!</h1>\n        <Oscillator \n          id=\"osc1\"\n          ref=\"osc1\"\n          nextNode={this.gainNode}\n          connectOutput={this.connectOutput}\n          context={this.state.context}\n\n        />\n        <button onClick={this.buttonHandler}>Play Sound!</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}