{"ast":null,"code":"import _assertThisInitialized from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/riki/Documents/Git/AudioSynth/front/src/synth.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar synthesizer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(synthesizer, _Component);\n\n  function synthesizer() {\n    var _this;\n\n    _classCallCheck(this, synthesizer);\n\n    return _possibleConstructorReturn(_this);\n  }\n\n  return synthesizer;\n}(Component);\n\nvar synth =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(synth, _Component2);\n\n  function synth(context, props) {\n    _classCallCheck(this, synth);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(synth).call(this, props));\n  }\n\n  _createClass(synth, [{\n    key: \"mute\",\n    value: function mute() {\n      //mutes the track\n      console.log('muted in the sound class');\n      this.gainNode.gain.setValueAtTime(0, this.context.currentTime);\n    }\n  }, {\n    key: \"unmute\",\n    value: function unmute() {\n      this.gainNode.gain.value = 1;\n    }\n  }, {\n    key: \"volumeAdjust\",\n    value: function volumeAdjust(val) {\n      this.gainNode.gain.value = val;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"polysynth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"oscillatorGroup\", {\n        value: this.state.oscillator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(\"lfoGroup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(\"envelopeGroup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"filterGroup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return synth;\n}(Component);\n\nvar OscillatorModule =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(OscillatorModule, _Component3);\n\n  /*Oscillator group is the audio source module web synthesizer. The class contains three oscillators.\n  */\n  function OscillatorModule(props) {\n    var _this2;\n\n    _classCallCheck(this, OscillatorModule);\n\n    //context = audioContext from web audio api\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(OscillatorModule).call(this, props));\n    _this2.context = _this2.props.context;\n    _this2.gainNode = _this2.context.createGain();\n    _this2.merge = _this2.context.createChannelMerger(3);\n\n    _this2.osc1.connect(_this2.merge, 1, 0);\n\n    _this2.osc2.connect(_this2.merge, 1, 1);\n\n    _this2.osc3.connect(_this2.merge, 1, 2);\n\n    _this2.merge.connect(_this2.gainNode);\n\n    _this2.state = {\n      osc1Type: 'sine',\n      osc2Type: 'sine',\n      osc3Type: 'sine'\n    };\n    _this2.setWave = _this2.setWave.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  }\n\n  _createClass(OscillatorModule, [{\n    key: \"setWave\",\n    value: function setWave(wave, osc) {\n      switch (osc) {\n        case \"osc1\":\n          this.osc1.setWave(wave);\n          break;\n\n        case \"osc2\":\n          this.osc2.setWave(wave);\n          break;\n\n        case \"osc3\":\n          this.osc3.setWave(wave);\n          break;\n      }\n    }\n  }, {\n    key: \"setGain\",\n    value: function setGain(osc1Vol, osc2Vol, osc3Vol) {\n      //Should be a percentage, where function maps \n      this.osc1.setVolume(osc1Vol);\n      this.osc2.setVolume(osc2Vol);\n      this.osc3.setVolume(osc3Vol);\n    }\n  }, {\n    key: \"getlastNode\",\n    value: function getlastNode() {\n      return this.merge;\n    }\n  }, {\n    key: \"play\",\n    value: function play(value, time) {\n      this.refs.osc1Child.play(value, time);\n      this.refs.osc2Child.play(value, time);\n      this.refs.osc3Child.play(value, time);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(time) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"oscModule\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Oscillator, {\n        id: \"osc1\",\n        ref: \"osc1Child\",\n        nextNode: this.merge,\n        onPress: this.play,\n        onRelease: this.stop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(Oscillator, {\n        id: \"osc2\",\n        ref: \"osc2Child\",\n        onPress: this.play,\n        onRelease: this.stop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(Oscillator, {\n        id: \"osc3\",\n        ref: \"osc1Child\",\n        onPress: this.play,\n        onRelease: this.stop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return OscillatorModule;\n}(Component);\n\nvar LFOModule =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(LFOModule, _Component4);\n\n  function LFOModule(context) {\n    var _this3;\n\n    _classCallCheck(this, LFOModule);\n\n    return _possibleConstructorReturn(_this3);\n  }\n\n  return LFOModule;\n}(Component);\n\nvar envelopeGroup =\n/*#__PURE__*/\nfunction (_Component5) {\n  _inherits(envelopeGroup, _Component5);\n\n  function envelopeGroup(context) {\n    var _this4;\n\n    _classCallCheck(this, envelopeGroup);\n\n    return _possibleConstructorReturn(_this4);\n  }\n\n  return envelopeGroup;\n}(Component);\n\nvar Oscillator =\n/*#__PURE__*/\nfunction (_Component6) {\n  _inherits(Oscillator, _Component6);\n\n  //oscillator class encapsulates states associated to individual oscillator\n  //Requires audio node of where to connect oscillator to and contains functions\n  //to be called by the parent class OscillatorModule\n  function Oscillator(props) {\n    var _this5;\n\n    _classCallCheck(this, Oscillator);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Oscillator).call(this, props));\n    _this5.state = {\n      //context is audioContext created using the Web Audio API.\n      oscType: 'sine',\n      //need to know where to connect oscillator. \n      nextNode: props.nextNode\n    };\n    _this5.gainNode = _this5.props.context.createGain();\n    return _this5;\n  }\n\n  _createClass(Oscillator, [{\n    key: \"init\",\n    value: function init() {\n      this.osc = this.props.context.createOscillator(); //this.gainNode = this.props.context.createGain();\n\n      this.osc.connect(this.gainNode);\n      this.gainNode.connect(this.props.context.destination);\n      this.osc.type = this.state.oscType; //connects oscillator to gain node\n      //this.gainNode.connect(this.state.nextNode);\n      //this.props.connectOutput(this.gainNode);\n      //connects gain node to the output destination. Temporary until further implementation.\n      //this.gainNode.connect(this.state.nextNode);\n      // This binding is necessary to make `this` work in the callback\n    }\n  }, {\n    key: \"setWave\",\n    value: function setWave(wave) {\n      //sets the wave type of the oscillator\n      this.setState({\n        oscType: wave\n      });\n    }\n  }, {\n    key: \"getOscGainNode\",\n    value: function getOscGainNode() {\n      //returns the oscillator object to be used to connected in an audio chain.\n      return this.gainNode;\n    }\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(val) {\n      this.gainNode.gain.value = val;\n    }\n  }, {\n    key: \"play\",\n    value: function play(value, time) {\n      //value = pitch of note, time = \n      this.init();\n      this.osc.frequency.value = value;\n      this.gainNode.gain.setValueAtTime(1, this.props.context.currentTime);\n      this.osc.start(time);\n      this.stop(time);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.gainNode.gain.exponentialRampToValueAtTime(0.005, time + 1);\n      this.osc.stop(time + 3);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: this.props.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Wave-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.setWave.bind(this, 'sine'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"Sine\"), React.createElement(\"button\", {\n        onClick: this.setWave.bind(this, 'square'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"Square\"), React.createElement(\"button\", {\n        onClick: this.setWave.bind(this, 'sawtooth'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"Saw\"), React.createElement(\"button\", {\n        onClick: this.setWave.bind(this, 'triangle'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Triangle\")), this.state.oscType, React.createElement(\"div\", {\n        className: \"Pitch-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pitchKnob\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Oscillator;\n}(Component);\n\nvar envelope = function envelope() {\n  _classCallCheck(this, envelope);\n};\n\nvar lfo =\n/*#__PURE__*/\nfunction () {\n  //Frequency of low frequency oscillator\n  function lfo(context) {\n    _classCallCheck(this, lfo);\n\n    this.osc = context.createOscillator();\n    this.analyser = this.context.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n  }\n\n  _createClass(lfo, [{\n    key: \"setWave\",\n    value: function setWave(wave) {\n      //sets the wave type of the oscillator\n      this.osc.type = wave;\n    }\n  }, {\n    key: \"getWave\",\n    value: function getWave() {\n      //gets the current wave type of the oscillator\n      return this.osc.type;\n    }\n  }, {\n    key: \"setFreq\",\n    value: function setFreq(freq) {\n      this.osc.frequency.value = freq;\n    }\n  }, {\n    key: \"getFreq\",\n    value: function getFreq() {\n      return this.osc.frequnect.value;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: this.props.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return lfo;\n}();\n\nvar filter = function filter() {\n  _classCallCheck(this, filter);\n};\n\nexport default Oscillator; // export default oscillatorGroup;\n// export default synth;","map":{"version":3,"sources":["/Users/riki/Documents/Git/AudioSynth/front/src/synth.js"],"names":["React","Component","synthesizer","synth","context","props","console","log","gainNode","gain","setValueAtTime","currentTime","value","val","state","oscillator","OscillatorModule","createGain","merge","createChannelMerger","osc1","connect","osc2","osc3","osc1Type","osc2Type","osc3Type","setWave","bind","wave","osc","osc1Vol","osc2Vol","osc3Vol","setVolume","time","refs","osc1Child","play","osc2Child","osc3Child","stop","LFOModule","envelopeGroup","Oscillator","oscType","nextNode","createOscillator","destination","type","setState","init","frequency","start","exponentialRampToValueAtTime","id","envelope","lfo","analyser","createAnalyser","dataArray","Uint8Array","frequencyBinCount","freq","frequnect","filter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass synthesizer extends Component{\n    constructor(){\n\n    }\n}\n\n\nclass synth extends Component{\n    constructor(context, props){\n        super(props);\n\n    }\n\n    mute() {//mutes the track\n        console.log('muted in the sound class');\n        this.gainNode.gain.setValueAtTime(0, this.context.currentTime);\n\n    }\n\n\n\n    unmute() {\n        this.gainNode.gain.value = 1;\n    }\n    volumeAdjust(val) {\n        this.gainNode.gain.value = val;\n    }\n    handle\n    render() {\n        return (\n            <div className=\"polysynth\">\n                <oscillatorGroup\n                    value={this.state.oscillator}\n\n                />\n\n                <lfoGroup\n                \n                />\n                <envelopeGroup\n                \n                />\n                <filterGroup\n                \n                />\n            </div>\n\n\n        );\n    }\n}\n\n\n\n\n\n\nclass OscillatorModule extends Component{\n    /*Oscillator group is the audio source module web synthesizer. The class contains three oscillators.\n    */\n    constructor(props){\n         //context = audioContext from web audio api\n        super(props);\n        this.context = this.props.context;\n        this.gainNode = this.context.createGain();\n        this.merge = this.context.createChannelMerger(3);\n        this.osc1.connect(this.merge,1,0);\n        this.osc2.connect(this.merge,1,1);\n        this.osc3.connect(this.merge,1,2);\n        this.merge.connect(this.gainNode);\n        this.state = {\n            osc1Type: 'sine',\n            osc2Type: 'sine',\n            osc3Type: 'sine',\n        }\n        this.setWave = this.setWave.bind(this);\n    }\n    setWave(wave,osc){\n        switch (osc){\n            case \"osc1\":\n            this.osc1.setWave(wave);\n            break;\n            case \"osc2\":\n            this.osc2.setWave(wave);\n            break;\n            case \"osc3\":\n            this.osc3.setWave(wave);\n            break;\n        }\n    }\n    setGain(osc1Vol, osc2Vol, osc3Vol){\n        //Should be a percentage, where function maps \n        this.osc1.setVolume(osc1Vol);\n        this.osc2.setVolume(osc2Vol);\n        this.osc3.setVolume(osc3Vol);\n    }\n\n    getlastNode(){\n        return this.merge;\n    }\n\n    play(value, time){\n        this.refs.osc1Child.play(value, time);\n        this.refs.osc2Child.play(value, time);\n        this.refs.osc3Child.play(value, time);\n    }\n\n    stop(time){\n        \n    }\n\n    render(){\n        return(\n            <div className=\"oscModule\">\n                <Oscillator \n                    id={\"osc1\"}\n                    ref=\"osc1Child\"\n                    nextNode={this.merge}\n                    onPress={this.play}\n                    onRelease={this.stop}\n                />\n\n                <Oscillator \n                    id={\"osc2\"}\n                    ref=\"osc2Child\"\n                    onPress={this.play}\n                    onRelease={this.stop}\n                />\n\n                <Oscillator \n                    id={\"osc3\"}\n                    ref=\"osc1Child\"\n                    onPress={this.play}\n                    onRelease={this.stop}\n                />\n            </div>\n        );\n    }\n}\n\nclass LFOModule extends Component{\n    constructor(context){\n\n    }\n\n}\n\nclass envelopeGroup extends Component{\n    constructor(context){\n        \n    }\n}\n\nclass Oscillator extends Component{\n    //oscillator class encapsulates states associated to individual oscillator\n    //Requires audio node of where to connect oscillator to and contains functions\n    //to be called by the parent class OscillatorModule\n    constructor(props){\n        super(props)\n        this.state = {\n            //context is audioContext created using the Web Audio API.\n            oscType : 'sine',\n            //need to know where to connect oscillator. \n            nextNode: props.nextNode,\n        };\n        this.gainNode = this.props.context.createGain();\n    }\n\n    init(){\n        this.osc = this.props.context.createOscillator();\n        //this.gainNode = this.props.context.createGain();\n\n        this.osc.connect(this.gainNode);\n        this.gainNode.connect(this.props.context.destination);\n        \n        this.osc.type = this.state.oscType;\n        //connects oscillator to gain node\n        //this.gainNode.connect(this.state.nextNode);\n        //this.props.connectOutput(this.gainNode);\n        //connects gain node to the output destination. Temporary until further implementation.\n        //this.gainNode.connect(this.state.nextNode);\n        // This binding is necessary to make `this` work in the callback\n    }\n\n    setWave(wave){ \n        //sets the wave type of the oscillator\n        this.setState({oscType: wave})\n    }\n\n    getOscGainNode(){\n    //returns the oscillator object to be used to connected in an audio chain.\n        return this.gainNode;\n    }\n\n    setVolume(val){\n        this.gainNode.gain.value = val;\n    }\n\n    play(value, time){ \n    //value = pitch of note, time = \n        this.init();\n        this.osc.frequency.value = value;\n        this.gainNode.gain.setValueAtTime(1, this.props.context.currentTime);\n        this.osc.start(time);\n        this.stop(time);\n    }\n\n    stop(time) {\n        this.gainNode.gain.exponentialRampToValueAtTime(0.005, time + 1);\n        this.osc.stop(time + 3);\n    }\n\n    render(){\n        return(\n            <div id = {this.props.id}>\n                <div className=\"Wave-form\">\n                    <button onClick={this.setWave.bind(this, 'sine')}>Sine</button>\n                    <button onClick={this.setWave.bind(this, 'square')}>Square</button>\n                    <button onClick={this.setWave.bind(this, 'sawtooth')}>Saw</button>\n                    <button onClick={this.setWave.bind(this, 'triangle')}>Triangle</button>\n                </div>\n                {this.state.oscType}\n                <div className=\"Pitch-control\">\n                    <div className=\"pitchKnob\"></div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nclass envelope{\n    //Attack: time of gain rise - linear rate?\n    //Sustain: time extension of the play trigger\n    //Decay: time of gain decrease\n    //Release: time of signal length from starting point\n}\n\nclass lfo{\n    //Frequency of low frequency oscillator\n    constructor(context){\n        this.osc = context.createOscillator();\n        this.analyser = this.context.createAnalyser();\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    }\n    setWave(wave){ \n    //sets the wave type of the oscillator\n        this.osc.type = wave;\n    }\n    getWave(){ \n    //gets the current wave type of the oscillator\n        return this.osc.type;\n    }\n    setFreq(freq){\n        this.osc.frequency.value = freq;\n    }\n    getFreq(){\n        return this.osc.frequnect.value;\n    }\n    render(){\n        return(\n        <div id={this.props.id}>\n            \n        </div>\n        )\n    }\n}\n\nclass filter{\n    \n}\n\n\nexport default Oscillator;\n// export default oscillatorGroup;\n// export default synth;\n\n"]},"metadata":{},"sourceType":"module"}