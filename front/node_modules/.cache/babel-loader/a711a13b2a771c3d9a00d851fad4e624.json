{"ast":null,"code":"import _classCallCheck from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/riki/Documents/Git/AudioSynth/front/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Oscillator =\n/*#__PURE__*/\nfunction () {\n  function Oscillator(context) {\n    _classCallCheck(this, Oscillator);\n\n    this.context = context;\n    this.osc = context.createOscillator();\n    this.osc.type = 'sine';\n    this.osc.frequency.value = '440';\n  }\n\n  _createClass(Oscillator, [{\n    key: \"setWave\",\n    value: function setWave(wave) {\n      //sets the wave type of the oscillator\n      this.osc.type = wave;\n    }\n  }, {\n    key: \"connectNode\",\n    value: function connectNode(node) {\n      //takes an audio node as input to connect oscillator to\n      this.osc.connect(node);\n    }\n  }, {\n    key: \"play\",\n    value: function play(value, time) {\n      //value = pitch of note, time = \n      this.init();\n      this.osc.frequency.value = value;\n      this.gainNode.gain.setValueAtTime(1, this.context.currentTime);\n      this.osc.start(time);\n      this.stop(time);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.gainNode.gain.exponentialRampToValueAtTime(0.001, time + 1);\n      this.osc.stop(time + 1);\n    }\n  }]);\n\n  return Oscillator;\n}();","map":{"version":3,"sources":["/Users/riki/Documents/Git/AudioSynth/front/src/webAudio.js"],"names":["Oscillator","context","osc","createOscillator","type","frequency","value","wave","node","connect","time","init","gainNode","gain","setValueAtTime","currentTime","start","stop","exponentialRampToValueAtTime"],"mappings":";;;IAAMA,U;;;AACF,sBAAYC,OAAZ,EAAoB;AAAA;;AAChB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,GAAL,GAAWD,OAAO,CAACE,gBAAR,EAAX;AACA,SAAKD,GAAL,CAASE,IAAT,GAAgB,MAAhB;AACA,SAAKF,GAAL,CAASG,SAAT,CAAmBC,KAAnB,GAA2B,KAA3B;AACH;;;;4BAEOC,I,EAAK;AACT;AACA,WAAKL,GAAL,CAASE,IAAT,GAAgBG,IAAhB;AACH;;;gCAEWC,I,EAAK;AACb;AACA,WAAKN,GAAL,CAASO,OAAT,CAAiBD,IAAjB;AACH;;;yBAEIF,K,EAAOI,I,EAAK;AACb;AACI,WAAKC,IAAL;AACA,WAAKT,GAAL,CAASG,SAAT,CAAmBC,KAAnB,GAA2BA,KAA3B;AACA,WAAKM,QAAL,CAAcC,IAAd,CAAmBC,cAAnB,CAAkC,CAAlC,EAAqC,KAAKb,OAAL,CAAac,WAAlD;AACA,WAAKb,GAAL,CAASc,KAAT,CAAeN,IAAf;AACA,WAAKO,IAAL,CAAUP,IAAV;AAEP;;;yBAEIA,I,EAAK;AACN,WAAKE,QAAL,CAAcC,IAAd,CAAmBK,4BAAnB,CAAgD,KAAhD,EAAuDR,IAAI,GAAG,CAA9D;AACA,WAAKR,GAAL,CAASe,IAAT,CAAcP,IAAI,GAAG,CAArB;AACH","sourcesContent":["class Oscillator{\n    constructor(context){\n        this.context = context;\n        this.osc = context.createOscillator();\n        this.osc.type = 'sine';\n        this.osc.frequency.value = '440'\n    }\n\n    setWave(wave){\n        //sets the wave type of the oscillator\n        this.osc.type = wave;\n    }\n\n    connectNode(node){\n        //takes an audio node as input to connect oscillator to\n        this.osc.connect(node);\n    }\n    \n    play(value, time){ \n        //value = pitch of note, time = \n            this.init();\n            this.osc.frequency.value = value;\n            this.gainNode.gain.setValueAtTime(1, this.context.currentTime);\n            this.osc.start(time);\n            this.stop(time);\n            \n    }\n\n    stop(time){\n        this.gainNode.gain.exponentialRampToValueAtTime(0.001, time + 1);\n        this.osc.stop(time + 1);\n    }\n}"]},"metadata":{},"sourceType":"module"}